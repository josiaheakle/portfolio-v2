{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/josiah-eakle/Dev/React-Apps/portfolio-v2/portfolio/src/components/canvas/CanvasBackground.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useState } from \"react\";\n\nconst CanvasBackground = props => {\n  _s();\n\n  const [scroll, setScroll] = useState(undefined);\n  const [mousePos, setMousePos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [canvas, setCanvas] = useState(undefined);\n  const [canvasContext, setCanvasContext] = useState(undefined);\n  const canvasRef = useRef(null);\n\n  const handleMouseMove = e => setMousePos({\n    x: e.clientX,\n    y: e.clientY\n  });\n\n  const handleScroll = () => setScroll(window.pageYOffset); // useEffect(() => {\n  //     if(canvasContext) {\n  //         canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n  //         canvasContext.fillStyle = 'red'\n  //         canvasContext.beginPath();\n  //         canvasContext.arc(mousePos.x, mousePos.y, 20, 0, 2 * Math.PI);\n  //         canvasContext.fill();\n  //         // canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n  //         // canvasContext.fillRect(mousePos.x, mousePos.y, 10, 10);\n  //     }\n  // }, [mousePos])\n\n\n  const points = [{\n    x: window.innerWidth / 5 * 2,\n    y: window.innerHeight / 5 * 2\n  }];\n  let pointIndex = 0;\n\n  const getNextPoint = () => {\n    return points[pointIndex++];\n  };\n\n  const drawNextPoint = () => {\n    setTimeout(() => {\n      if ((pointIndex + 1) % 4 === 0) {\n        canvasContext.fill();\n      }\n\n      if (!(pointIndex === points.length)) {\n        drawNextPoint();\n      }\n    }, 100);\n  };\n\n  const drawStart = () => {\n    canvasContext.beginPath();\n    drawNextPoint();\n    canvasContext.fillStyle = 'coral';\n    canvasContext.fillRect(window.innerWidth / 5 * 2, window.innerHeight / 5 * 2, window.innerWidth / 5, window.innerHeight / 5);\n  };\n\n  useEffect(() => {\n    // HANDLE MOUSE MOVEMENT\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    window.addEventListener(\"scroll\", handleScroll); // Get canvas element from ref\n\n    setCanvas(canvasRef.current);\n    const context = canvasRef.current.getContext('2d');\n    setCanvasContext(context);\n    canvasRef.current.width = window.innerWidth;\n    canvasRef.current.height = window.innerHeight;\n    drawStart();\n    return () => {\n      // REMOVE LISTENER ON UNMOUNT\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"CanvasBackground\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CanvasBackground, \"EbNxQ1ES80Uv/MJPDRvw5qPM79U=\");\n\n_c = CanvasBackground;\nexport default CanvasBackground;\n\nvar _c;\n\n$RefreshReg$(_c, \"CanvasBackground\");","map":{"version":3,"sources":["/home/josiah-eakle/Dev/React-Apps/portfolio-v2/portfolio/src/components/canvas/CanvasBackground.js"],"names":["useRef","useEffect","useState","CanvasBackground","props","scroll","setScroll","undefined","mousePos","setMousePos","x","y","canvas","setCanvas","canvasContext","setCanvasContext","canvasRef","handleMouseMove","e","clientX","clientY","handleScroll","window","pageYOffset","points","innerWidth","innerHeight","pointIndex","getNextPoint","drawNextPoint","setTimeout","fill","length","drawStart","beginPath","fillStyle","fillRect","addEventListener","current","context","getContext","width","height","removeEventListener"],"mappings":";;;;;AACA,SAASA,MAAT,EAAiBC,SAAjB,EAA4BC,QAA5B,QAA4C,OAA5C;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAAA;;AAEhC,QAAM,CAAEC,MAAF,EAAUC,SAAV,IAAwBJ,QAAQ,CAACK,SAAD,CAAtC;AACA,QAAM,CAAEC,QAAF,EAAYC,WAAZ,IAA4BP,QAAQ,CAAC;AAACQ,IAAAA,CAAC,EAAE,CAAJ;AAAOC,IAAAA,CAAC,EAAE;AAAV,GAAD,CAA1C;AACA,QAAM,CAAEC,MAAF,EAAUC,SAAV,IAAwBX,QAAQ,CAACK,SAAD,CAAtC;AACA,QAAM,CAAEO,aAAF,EAAiBC,gBAAjB,IAAsCb,QAAQ,CAACK,SAAD,CAApD;AACA,QAAMS,SAAS,GAAGhB,MAAM,CAAC,IAAD,CAAxB;;AAEA,QAAMiB,eAAe,GAAIC,CAAD,IAAOT,WAAW,CAAC;AAAEC,IAAAA,CAAC,EAAEQ,CAAC,CAACC,OAAP;AAAgBR,IAAAA,CAAC,EAAEO,CAAC,CAACE;AAArB,GAAD,CAA1C;;AACA,QAAMC,YAAY,GAAG,MAAMf,SAAS,CAACgB,MAAM,CAACC,WAAR,CAApC,CATgC,CAWhC;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAEA,QAAMC,MAAM,GAAG,CAAE;AAACd,IAAAA,CAAC,EAAIY,MAAM,CAACG,UAAP,GAAoB,CAArB,GAA0B,CAA/B;AAAqCd,IAAAA,CAAC,EAAIW,MAAM,CAACI,WAAP,GAAqB,CAAtB,GAA2B;AAApE,GAAF,CAAf;AACA,MAAIC,UAAU,GAAG,CAAjB;;AAEA,QAAMC,YAAY,GAAG,MAAM;AACvB,WAAOJ,MAAM,CAACG,UAAU,EAAX,CAAb;AACH,GAFD;;AAIA,QAAME,aAAa,GAAG,MAAM;AACxBC,IAAAA,UAAU,CAAC,MAAM;AAGb,UAAI,CAACH,UAAU,GAAC,CAAZ,IAAiB,CAAlB,KAAyB,CAA5B,EAA+B;AAC3Bb,QAAAA,aAAa,CAACiB,IAAd;AACH;;AAED,UAAG,EAAEJ,UAAU,KAAKH,MAAM,CAACQ,MAAxB,CAAH,EAAoC;AAChCH,QAAAA,aAAa;AAChB;AACJ,KAVS,EAUP,GAVO,CAAV;AAWH,GAZD;;AAcA,QAAMI,SAAS,GAAG,MAAM;AAEpBnB,IAAAA,aAAa,CAACoB,SAAd;AAEAL,IAAAA,aAAa;AAEbf,IAAAA,aAAa,CAACqB,SAAd,GAA0B,OAA1B;AACArB,IAAAA,aAAa,CAACsB,QAAd,CAA0Bd,MAAM,CAACG,UAAP,GAAoB,CAArB,GAA0B,CAAnD,EAA2DH,MAAM,CAACI,WAAP,GAAqB,CAAtB,GAA2B,CAArF,EAA4FJ,MAAM,CAACG,UAAP,GAAoB,CAAhH,EAAsHH,MAAM,CAACI,WAAP,GAAqB,CAA3I;AACH,GARD;;AAUAzB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAqB,IAAAA,MAAM,CAACe,gBAAP,CAAwB,WAAxB,EAAqCpB,eAArC;AACAK,IAAAA,MAAM,CAACe,gBAAP,CAAwB,QAAxB,EAAkChB,YAAlC,EAHY,CAKZ;;AACAR,IAAAA,SAAS,CAACG,SAAS,CAACsB,OAAX,CAAT;AACA,UAAMC,OAAO,GAAGvB,SAAS,CAACsB,OAAV,CAAkBE,UAAlB,CAA6B,IAA7B,CAAhB;AACAzB,IAAAA,gBAAgB,CAACwB,OAAD,CAAhB;AACAvB,IAAAA,SAAS,CAACsB,OAAV,CAAkBG,KAAlB,GAA0BnB,MAAM,CAACG,UAAjC;AACAT,IAAAA,SAAS,CAACsB,OAAV,CAAkBI,MAAlB,GAA2BpB,MAAM,CAACI,WAAlC;AAEAO,IAAAA,SAAS;AAET,WAAO,MAAM;AACT;AACAX,MAAAA,MAAM,CAACqB,mBAAP,CAA2B,WAA3B,EAAwC1B,eAAxC;AACAK,MAAAA,MAAM,CAACqB,mBAAP,CAA2B,QAA3B,EAAqCtB,YAArC;AACH,KAJD;AAKH,GAnBQ,EAmBN,EAnBM,CAAT;AAqBA,sBACI;AAAQ,IAAA,GAAG,EAAEL,SAAb;AAAwB,IAAA,SAAS,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAnFD;;GAAMb,gB;;KAAAA,gB;AAqFN,eAAeA,gBAAf","sourcesContent":["\nimport { useRef, useEffect, useState } from \"react\"\n\nconst CanvasBackground = (props) => {\n\n    const [ scroll, setScroll ] = useState(undefined);\n    const [ mousePos, setMousePos ] = useState({x: 0, y: 0});\n    const [ canvas, setCanvas ] = useState(undefined);\n    const [ canvasContext, setCanvasContext ] = useState(undefined);\n    const canvasRef = useRef(null);\n\n    const handleMouseMove = (e) => setMousePos({ x: e.clientX, y: e.clientY });  \n    const handleScroll = () => setScroll(window.pageYOffset);\n\n    // useEffect(() => {\n    //     if(canvasContext) {\n\n    //         canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n\n\n    //         canvasContext.fillStyle = 'red'\n    //         canvasContext.beginPath();\n    //         canvasContext.arc(mousePos.x, mousePos.y, 20, 0, 2 * Math.PI);\n    //         canvasContext.fill();\n\n    //         // canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n    //         // canvasContext.fillRect(mousePos.x, mousePos.y, 10, 10);\n    //     }\n\n    // }, [mousePos])\n\n    const points = [ {x: ((window.innerWidth / 5) * 2 ) , y: ((window.innerHeight / 5) * 2 )} ];\n    let pointIndex = 0;\n\n    const getNextPoint = () => {\n        return points[pointIndex++];\n    }\n\n    const drawNextPoint = () => {\n        setTimeout(() => {\n\n\n            if(((pointIndex+1) % 4) === 0) {\n                canvasContext.fill();\n            }\n\n            if(!(pointIndex === points.length)) {\n                drawNextPoint();\n            }\n        }, 100)\n    }\n\n    const drawStart = () => {\n\n        canvasContext.beginPath();\n\n        drawNextPoint();\n\n        canvasContext.fillStyle = 'coral';\n        canvasContext.fillRect( ((window.innerWidth / 5) * 2 ) , ((window.innerHeight / 5) * 2 ) , (window.innerWidth / 5) , (window.innerHeight / 5) )\n    }\n\n    useEffect(() => {\n        // HANDLE MOUSE MOVEMENT\n        window.addEventListener(\"mousemove\", handleMouseMove);\n        window.addEventListener(\"scroll\", handleScroll);\n\n        // Get canvas element from ref\n        setCanvas(canvasRef.current);\n        const context = canvasRef.current.getContext('2d');\n        setCanvasContext(context);\n        canvasRef.current.width = window.innerWidth;\n        canvasRef.current.height = window.innerHeight;\n\n        drawStart();\n\n        return () => {\n            // REMOVE LISTENER ON UNMOUNT\n            window.removeEventListener(\"mousemove\", handleMouseMove);\n            window.removeEventListener(\"scroll\", handleScroll);\n        };\n    }, [])\n\n    return(\n        <canvas ref={canvasRef} className='CanvasBackground' />\n    );\n}\n\nexport default CanvasBackground;"]},"metadata":{},"sourceType":"module"}